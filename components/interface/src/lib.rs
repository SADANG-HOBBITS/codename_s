extern crate bincode;
extern crate rustc_serialize;

use bincode::rustc_serialize::{encode, decode};

/// default log info
#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub struct Log {
    pub id: u64,                                    // id (generated by system)
    pub timestamp: u32,                             // timestamp (for searching)
    pub http_information: HttpInformation,          // timestamp (for searching)
    pub extended_information: ExtendedInformation,  // timestamp (for searching)
}

/// http oriented info
#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub struct HttpInformation {
    pub host: String,                       // host (github.com/SADANG-HOBBITS/codename_s)
    pub url: String,                        // url (/v1/log/recoed)
    pub method: String,                     // method (POST, GET ...)
    pub headers: Vec<HttpHeader>,           // http headers (Content-Type: Application/json)
    pub request_body: String,               // request body ({"key":"value"})
    pub response_code: HttpResponseCode,    // response code (200, 300 ...)
    pub response_body: String,              // response body ({"return_code":"0000"})
    pub response_time: u32,                 // response time (102ms)
    pub log_id: u64,                        // log id
}

#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub enum HttpResponseCode {
    // add codes
}

#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub enum HttpHeader {
    // add headers
}

#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub enum ExtendedInformation {
    Server(ServerInformation),
    Client(ClientInformation),
}

/// log message oriented info
#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub struct ServerInformation {
    pub text_information: TextInformation,
    // add other information...
}

/// log message oriented info
#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub struct ClientInformation {
    pub text_information: TextInformation,
    // add other information...
}

/// log message oriented info
#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub struct TextInformation {
    pub environment: String,    // server environment (alpha, beta, rc ...)
    pub source_id: String,      // client id (asdfghjklzxcvbnmqwertyuiop)
    pub level: LogLevel,        // log level (ERROR, INFO ...)
    pub description: String,    // log text message (connected to server...)
    pub log_id: u64,            // log id
}

#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]
pub enum LogLevel {
    Fatal,
    Error,
    Warning,
    Info,
    Debug,
}


#[test]
fn it_works() {
}
